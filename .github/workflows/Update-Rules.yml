name: Rules Auto Update and Release
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2: 检查文件变更
      - name: Check file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      # 步骤3: 下载规则数据
      - name: Download rules
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        continue-on-error: true
        run: python ./data/python/dl.py

      # 步骤4: 合并规则
      - name: Merge rules
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: python ./data/python/merge.py

      # 步骤5: 生成DNS规则
      - name: Generate DNS rules
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: python ./data/python/filter-dns.py

      # 步骤6: 生成Quantumult X规则
      - name: Generate QX rules
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: python ./data/python/qx.py

      # 步骤7: 生成Mihomo规则
      - name: Generate Mihomo rules
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: python ./data/python/mihomo.py

      # 步骤8: 生成Loon规则
      - name: Generate Loon rules
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: python ./data/python/loon.py

      # 步骤9: 生成域名列表
      - name: Generate domain list
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: python ./data/python/domain_list.py

      # 步骤10: 更新项目元数据
      - name: Update metadata
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: python ./data/python/title.py

      # 步骤11: 配置Git环境
      - name: Setup Git
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # 步骤12: 提交变更
      - name: Commit changes
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: |
          git add --all
          git commit -m "Auto-update at $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"

      # 步骤13: 推送变更
      - name: Push changes
        if: steps.changes.outputs.any_changed == 'true' || contains(['workflow_dispatch', 'schedule'], github.event_name)
        run: |
          git pull --rebase
          git push origin HEAD:master

      # 步骤14: 创建版本发布
      - name: Create GitHub Release
        if: steps.changes.outputs.any_changed == 'true'
        env:
          ADBLOCK_COUNT: $(sed -n 's/^! Total count: //p' ./data/rules/adblock.txt)
          DNS_COUNT: $(sed -n 's/^! Total count: //p' ./data/rules/dns.txt)
          ALLOW_COUNT: $(sed -n 's/^! Total count: //p' ./data/rules/allow.txt)
        run: |
          echo "## 📊 规则统计" > release_note.md
          echo "- 拦截规则: $ADBLOCK_COUNT条" >> release_note.md
          echo "- DNS规则: $DNS_COUNT条" >> release_note.md
          echo "- 白名单: $ALLOW_COUNT条" >> release_note.md
          echo "\n⏰ 更新时间: $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S')" >> release_note.md

          gh release create \
            "v$(TZ=Asia/Shanghai date +'%Y%m%d')" \
            --title "规则更新 $(TZ=Asia/Shanghai date +'%m-%d')" \
            --notes-file release_note.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 步骤15: 清理历史工作流
      - name: Cleanup workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 3
          keep_minimum_runs: 5