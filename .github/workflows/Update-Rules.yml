name: Update Rules and Notify
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'
  release:
    types: [published]

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2: 检查文件变更
      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      # 步骤3: 调试输出
      - name: Debug Changes
        run: |
          echo "变更状态: ${{ steps.changes.outputs.any_changed }}"
          echo "变更文件: ${{ steps.changes.outputs.all_changed_files }}"

      # 步骤4-11: 规则处理流程
      - name: Download Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        continue-on-error: true
        run: python ./data/python/dl.py

      - name: Merge Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/merge.py

      - name: Generate dns Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/filter-dns.py

      - name: Generate qx Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/qx.py

      - name: Generate mihomo Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/mihomo.py

      - name: Generate loon Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/loon.py

      - name: Generate Domain List
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/domain_list.py

      - name: Update Title & ReadMe
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/title.py
          python ./data/python/clean-readme.py

      # 步骤12: Git操作
      - name: Configure Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "Auto-update at $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S')（北京时间）" || echo "No changes to commit"

      - name: Push Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git pull --rebase
          git push origin HEAD:master

      - name: Extract Release Info
  id: extract-info
  run: |
    # 提取更新时间
    UPDATE_TIME=$(grep -m1 "更新时间:" README.md | sed 's/更新时间: //')
    # 提取规则统计（3行）
    STATS=$(awk '/更新时间:/{getline; printf "%s\\n%s\\n%s", $0, getline, getline}' README.md)
    # 转换为tag格式（v20250730）
    TAG_VERSION=$(echo "$UPDATE_TIME" | awk '{gsub(/[-: ]/, "", $0); print "v"substr($0,1,8)}')
    
    echo "::set-output name=update_time::$UPDATE_TIME"
    echo "::set-output name=stats::$STATS"
    echo "::set-output name=tag_version::$TAG_VERSION"

- name: Create Release
  if: steps.extract-info.outputs.stats != ''
  uses: softprops/action-gh-release@v1
  with:
    tag_name: ${{ steps.extract-info.outputs.tag_version }}
    name: "Release ${{ steps.extract-info.outputs.update_time }}"
    body: |
      🔍 触发方式: ${{ github.event_name }}
      📝 变更状态: ${{ steps.changes.outputs.any_changed }}

      ### 规则统计
      ${{ steps.extract-info.outputs.stats }}
    draft: false
    prerelease: false
    generate_release_notes: false

      # 步骤15: 清理历史运行（保留最近3天）
      - name: Cleanup Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 5