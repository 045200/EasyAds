name: Update Rules and Notify
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'
  release:
    types: [published]

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2: 检查文件变更（关键调试点）
      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      # 步骤3: 调试输出变更状态
      - name: Debug Changes
        run: |
          echo "是否检测到变更: ${{ steps.changes.outputs.any_changed }}"
          echo "变更文件列表: ${{ steps.changes.outputs.all_changed_files }}"
          echo "触发事件: ${{ github.event_name }}"

      # 步骤4-11: 规则处理流程（仅在变更/手动/定时时运行）
      - name: Download Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        continue-on-error: true
        run: python ./data/python/dl.py

      - name: Merge Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/merge.py

      - name: Generate dns Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/filter-dns.py

      - name: Generate qx Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/qx.py

      - name: Generate mihomo Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/mihomo.py

      - name: Generate loon Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/loon.py

      - name: Generate Domain List
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/domain_list.py

      - name: Update Title & ReadMe
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/title.py
          python ./data/python/clean-readme.py

      # 步骤12: Git配置和提交
      - name: Configure Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "Auto-update at $(date +'%Y-%m-%d %H:%M:%S UTC%z')" || echo "No changes to commit"

      - name: Push Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git pull --rebase
          git push origin HEAD:master

      # 步骤13: 创建Release（优化条件）
      - name: Create Release
        id: create-release
        if: |
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
          (steps.changes.outputs.any_changed == 'true') ||
          (github.event_name == 'workflow_dispatch') ||
          (github.event_name == 'schedule')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v$(date +%Y%m%d.%H%M%S)"
          release_name: "Release $(date +'%Y-%m-%d %H:%M:%S')"
          body: |
            📅 自动生成 Release
            -------------------
            ▶ 触发方式: ${{ github.event_name }}
            ▶ 变更状态: ${{ steps.changes.outputs.any_changed }}
            ▶ 提交哈希: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          draft: false
          prerelease: false

      # 步骤14: 通知（始终执行，但区分场景）
      - name: Notify Telegram
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🚀 [${{ github.repository }}] 工作流执行结果
            ━━━━━━━━━━━━━━━━━
            ▫ 事件类型: ${{ github.event_name }}
            ▫ 变更状态: ${{ steps.changes.outputs.any_changed }}
            ▫ Release 创建: ${{ steps.create-release.outputs.url || '未创建' }}
            ▫ 查看详情: [${{ github.workflow }} Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      # 步骤15: 工作流清理（保留最近3天记录）
      - name: Cleanup Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 5