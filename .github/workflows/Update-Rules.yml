name: Update Rules and Notify
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'
  release:
    types: [published]

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2: 检查文件变更
      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      # 步骤3: 调试输出
      - name: Debug Changes
        run: |
          echo "变更状态: ${{ steps.changes.outputs.any_changed }}"
          echo "变更文件: ${{ steps.changes.outputs.all_changed_files }}"

      # 步骤4-11: 规则处理流程
      - name: Download Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        continue-on-error: true
        run: python ./data/python/dl.py

      - name: Merge Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/merge.py

      - name: Generate dns Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/filter-dns.py

      - name: Generate qx Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/qx.py

      - name: Generate mihomo Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/mihomo.py

      - name: Generate loon Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/loon.py

      - name: Generate Domain List
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/domain_list.py

      - name: Update Title & ReadMe
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/title.py
          python ./data/python/clean-readme.py

      # 步骤12: Git操作
      - name: Configure Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "Auto-update at $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S')（北京时间）" || echo "No changes to commit"

      - name: Push Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git pull --rebase
          git push origin HEAD:master

      # 步骤13: 准备Release内容
      - name: Extract Release Notes
        if: |
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
          (steps.changes.outputs.any_changed == 'true') ||
          (github.event_name == 'workflow_dispatch') ||
          (github.event_name == 'schedule')
        id: extract-notes
        run: |
          RELEASE_NOTES=$(awk '/更新时间:/{getline; printf "%s\\n%s\\n%s\\n", $0, getline, getline}' README.md)
          echo "::set-output name=notes::${RELEASE_NOTES}"
          echo "Extracted release notes:"
          echo "${RELEASE_NOTES}"

      # 步骤14: 创建Release（北京时间）
      - name: Create Release
        if: steps.extract-notes.outputs.notes != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v$(TZ=Asia/Shanghai date +'%Y%m%d')"
          name: "Release $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S 北京时间')"
          body: |
            🕒 生成时间: $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S %Z')
            🔍 触发方式: ${{ github.event_name }}
            📝 变更状态: ${{ steps.changes.outputs.any_changed }}
            
            ### 规则统计
            ${{ steps.extract-notes.outputs.notes }}
          draft: false
          prerelease: false
          generate_release_notes: false

      # 步骤15: 清理历史运行（保留最近3天）
      - name: Cleanup Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 5