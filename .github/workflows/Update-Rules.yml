name: Update Rules
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      - name: Install dependencies
  if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
  run: |
    sudo apt-get update -q
    sudo apt-get install -y -q --no-install-recommends \
      dnsutils  # 提供dig命令
    pip install --no-cache-dir \
      tldextract==3.4.1  # 确保SQLite支持
  env:
    PIP_NO_CACHE_DIR: "true"  # 禁用pip缓存

      - name: Download Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        continue-on-error: true
        run: |
          python ./data/python/dl.py

      - name: Smart DNS Filter
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
        # 确保缓存目录存在
        mkdir -p ./tmp
    
        # 执行DNS验证脚本
        python ./data/python/dns.py \
      --input-dir ./tmp \
      --timeout 2 \
      --workers 6 \
      --cache-file ./tmp/dns_cache.db \
      --batch-size 500 2>&1 | tee -a dns_validation.log
    
    # 上传日志供调试
       echo "===== DNS VALIDATION LOG ====="
    cat dns_validation.log
       timeout-minutes: 30  # 防止长时间挂起

      - name: Merge Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/merge.py
          
      - name: Generate qx Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/qx.py
          
      - name: Generate mihomo Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/mihomo.py

      - name: Generate loon Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/loon.py

      - name: Generate Domain List
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/domain_list.py

      - name: Update Title&ReadMe
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/title.py
          python ./data/python/clean-readme.py

      - name: Configure Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git branch -m master

      - name: Commit Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "Updated at $(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S')（北京时间）" || echo "No changes to commit"
      
      - name: Sync and Push Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          for i in 1 2 3; do
            git pull --rebase origin master
            git push origin master && break || sleep 5
          done

      - name: Delete workflow runs 
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0