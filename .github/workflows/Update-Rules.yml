name: Update Rules
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'

jobs:
  update:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify directory structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Directory structure:"
          ls -R
          mkdir -p data/tmp  # 确保基础tmp目录存在

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytz

      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      - name: Download Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        continue-on-error: true
        run: |
          python data/python/dl.py

      - name: Run merge script
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Current directory before merge: $(pwd)"
          cd data/python && \
          echo "Directory contents before merge:" && \
          ls -l && \
          python merge.py && \
          cd ../..
          echo "Merge completed successfully"

      - name: Generate DNS rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python data/python/filter-dns.py

      - name: Generate Quantumult X rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python data/python/qx.py

      - name: Generate Mihomo rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python data/python/mihomo.py

      - name: Generate Loon rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python data/python/loon.py

      - name: Generate domain list
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python data/python/domain_list.py

      - name: Update documentation
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python data/python/title.py
          python data/python/clean-readme.py

      - name: Configure Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git branch -m master

      - name: Commit changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "Rules updated at $(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S') (Beijing Time)" || echo "No changes to commit"

      - name: Generate release template
        run: |
          python data/python/release.py
          cat release_template.json

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $(jq -r .tag_name release_template.json)
          release_name: $(jq -r .name release_template.json)
          body: $(jq -r .body release_template.json)
          draft: false
          prerelease: false

      - name: Push changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          for i in {1..3}; do
            git pull --rebase origin master && \
            git push origin master && break || \
            sleep 5
          done

      - name: Cleanup workflow runs
        if: always()
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 3