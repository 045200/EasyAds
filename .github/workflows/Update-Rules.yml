name: Rules Update and Notification
on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '0 */12 * * *'  # 每12小时自动运行一次
  push:
    paths:
      - 'data/python/**'  # 监控这些目录的变更
      - 'data/source/**'
      - 'data/mod/**'
  release:
    types: [published]  # 发布新版本时触发

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      # Step 2: Check file changes
      - name: Check changed files
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      # Step 3: Download rules
      - name: Download rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        continue-on-error: true  # 允许失败不影响后续步骤
        run: python ./data/python/dl.py

      # Step 4: Merge rules
      - name: Merge rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/merge.py

      # Step 5: Generate DNS rules
      - name: Generate DNS rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/filter-dns.py

      # Step 6: Generate Quantumult X rules
      - name: Generate Quantumult X rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/qx.py

      # Step 7: Generate Mihomo rules
      - name: Generate Mihomo rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/mihomo.py

      # Step 8: Generate Loon rules
      - name: Generate Loon rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/loon.py

      # Step 9: Generate domain list
      - name: Generate domain list
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/domain_list.py

      # Step 10: Update title and README
      - name: Update title and README
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/title.py
          python ./data/python/clean-readme.py

      # Step 11: Configure Git
      - name: Configure Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Step 12: Commit changes
      - name: Commit changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "Auto update at $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S') (Beijing Time)" || echo "No changes to commit"

      # Step 13: Push changes
      - name: Push changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git pull --rebase
          git push origin HEAD:master

      # Step 14: Extract release info
      - name: Extract release information
        id: extract-info
        run: |
          # Extract and format Beijing time
          UPDATE_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          
          # Precisely extract three lines of rule statistics (with thousand separators)
          STATS=$(grep -A 2 "📈 拦截规则数量:" README.md | sed -e 's/\([0-9]\+\)/printf "%'"'"'d" \1/ge' -e 's/\\/\\\\/g')
          
          # Generate standardized tag version
          TAG_VERSION=$(date -d "$UPDATE_TIME" +'v%Y%m%d')
          
          # Generate pretty Chinese time format
          PRETTY_TIME=$(date -d "$UPDATE_TIME" +'%Y年%m月%d日 %H:%M:%S')
          
          echo "update_time=$UPDATE_TIME" >> $GITHUB_OUTPUT
          echo "pretty_time=$PRETTY_TIME" >> $GITHUB_OUTPUT
          echo "stats<<EOF
$STATS
EOF" >> $GITHUB_OUTPUT
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT

      # Step 15: Create release
      - name: Create release
        if: steps.extract-info.outputs.stats != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract-info.outputs.tag_version }}
          name: "Rules Update ${{ steps.extract-info.outputs.pretty_time }}"
          body: |
            📅 **Update Time**: ${{ steps.extract-info.outputs.pretty_time }}

            📊 **Rules Statistics**:
            ───────────────────────
            ${{ steps.extract-info.outputs.stats }}
            ───────────────────────

            🔄 **Update Status**: ${{ steps.changes.outputs.any_changed == 'true' && 'Rules updated' || 'No changes detected' }}
          draft: false
          prerelease: false

      # Step 16: Cleanup workflow runs
      - name: Cleanup workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3  # 保留3天内的记录
          keep_minimum_runs: 5  # 至少保留5次运行记录