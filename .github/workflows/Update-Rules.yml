name: 规则更新与通知
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'
  release:
    types: [published]

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2：检查文件变更
      - name: 检查文件变更
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**

      # 步骤3：下载规则
      - name: 下载规则
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        continue-on-error: true
        run: python ./data/python/dl.py

      # 步骤4：合并规则
      - name: 合并规则
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/merge.py

      # 步骤5：生成DNS规则
      - name: 生成DNS规则
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/filter-dns.py

      # 步骤6：生成Quantumult X规则
      - name: 生成Quantumult X规则
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/qx.py

      # 步骤7：生成Mihomo规则
      - name: 生成Mihomo规则
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/mihomo.py

      # 步骤8：生成Loon规则
      - name: 生成Loon规则
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/loon.py

      # 步骤9：生成域名列表
      - name: 生成域名列表
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ./data/python/domain_list.py

      # 步骤10：更新标题和README
      - name: 更新标题和README
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ./data/python/title.py
          python ./data/python/clean-readme.py

      # 步骤11：配置Git
      - name: 配置Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # 步骤12：提交变更
      - name: 提交变更
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "自动更新于 $(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S')（北京时间）" || echo "没有变更需要提交"

      # 步骤13：推送变更
      - name: 推送变更
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git pull --rebase
          git push origin HEAD:master

      # 步骤14：提取发布信息
      - name: 提取发布信息
        id: extract-info
        run: |
          # 提取并格式化北京时间
          UPDATE_TIME=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          
          # 精确提取三行规则统计（带千位分隔符格式）
          STATS=$(grep -A 2 "📈 拦截规则数量:" README.md | sed -e 's/\([0-9]\+\)/printf "%'"'"'d" \1/ge' -e 's/\\/\\\\/g')
          
          # 生成标准化的tag版本号
          TAG_VERSION=$(date -d "$UPDATE_TIME" +'v%Y%m%d')
          
          # 生成美观的中文时间格式
          PRETTY_TIME=$(date -d "$UPDATE_TIME" +'%Y年%m月%d日 %H:%M:%S')
          
          echo "update_time=$UPDATE_TIME" >> $GITHUB_OUTPUT
          echo "pretty_time=$PRETTY_TIME" >> $GITHUB_OUTPUT
          echo "stats<<EOF
$STATS
EOF" >> $GITHUB_OUTPUT
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT

      # 步骤15：创建发布
- name: 创建发布
  if: steps.extract-info.outputs.stats != ''
  uses: softprops/action-gh-release@v1
  with:
    tag_name: ${{ steps.extract-info.outputs.tag_version }}
    name: "规则更新 ${{ steps.extract-info.outputs.pretty_time }}"
    body: |
      📅 **更新时间**: ${{ steps.extract-info.outputs.pretty_time }}

      📊 **规则统计**:
      ───────────────────────
      ${{ steps.extract-info.outputs.stats }}
      ───────────────────────

      🔄 **更新状态**: ${{ steps.changes.outputs.any_changed == 'true' && '规则已更新' || '规则无变化' }}
    draft: false
    prerelease: false
      # 步骤16：清理历史运行
      - name: 清理工作流运行记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 5